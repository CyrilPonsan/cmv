name: Build on DockerHub and Deploy to AWS
on:
  push:
    branches:
      - master
env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
  AWS_PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY }}
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./cmv/
          file: ./cmv/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/cmv_auth:latest
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./cmv_home/
          file: ./cmv_home/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/cmv_home:latest
  deploy:
    needs: build # Specifies that the `deploy` job depends on the `build` job
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_TOKEN }}

      - name: Set permissions for private key
        run: |
          echo "${{ env.AWS_PRIVATE_KEY }}" > key.pem
          chmod 600 key.pem
      - name: Login to Docker on EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i key.pem ${{secrets.AWS_USER}}@${{secrets.AWS_HOST}} 'docker login -u ${{env.DOCKERHUB_USERNAME}} -p ${{env.DOCKERHUB_TOKEN}}'
      - name: "Create env file"
        run: |
          ssh -o StrictHostKeyChecking=no -i key.pem ${{secrets.AWS_USER}}@${{secrets.AWS_HOST}} 'echo "${{ secrets.API_ENV }}" > .env || true'
      - name: Suppression du fichier docker-compose.yml
        run: |
          ssh -o StrictHostKeyChecking=no -i key.pem ${{secrets.AWS_USER}}@${{secrets.AWS_HOST}} 'sudo rm docker-compose.yml || true'
      - name: Copier fichier vers EC2
        run: |
          scp -i key.pem ./docker-compose.yml ${{secrets.AWS_USER}}@${{secrets.AWS_HOST}}:~/docker-compose.yml
      - name: Stop running container
        run: |
          ssh -o StrictHostKeyChecking=no -i key.pem ${{secrets.AWS_USER}}@${{secrets.AWS_HOST}} 'sudo docker compose down || true'
      - name: Delete old images
        run: |
          ssh -o StrictHostKeyChecking=no -i key.pem ${{secrets.AWS_USER}}@${{secrets.AWS_HOST}} 'sudo docker image rm ${{secrets.DOCKERHUB_USERNAME}}/cmv_auth:latest || true'
          ssh -o StrictHostKeyChecking=no -i key.pem ${{secrets.AWS_USER}}@${{secrets.AWS_HOST}} 'sudo docker image rm ${{secrets.DOCKERHUB_USERNAME}}/cmv_home:latest || true'
      - name: Cr√©ation du network
        run: |
          ssh -o StrictHostKeyChecking=no -i key.pem ${{secrets.AWS_USER}}@${{secrets.AWS_HOST}} 'sudo docker network create cmv || true'
      - name: Run new container
        run: |
          ssh -o StrictHostKeyChecking=no -i key.pem ${{secrets.AWS_USER}}@${{secrets.AWS_HOST}} 'cd ~/ && sudo docker compose up -d'
