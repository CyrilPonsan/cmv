pipeline {
    agent any
    
    tools {
        nodejs 'nodejs'
    }
    
    environment {
        DOCKERHUB_CREDENTIALS = credentials('cmv-dockerhub')
        IMAGE_GATEWAY = "firizgoude/cmv_gateway"
        IMAGE_GATEWAY_TAG = "gateway-${env.BUILD_NUMBER}"
        NPM_CACHE_DIR = "tmp/npm-cache"
        BRANCH_NAME = "${env.GIT_BRANCH.split('/').last()}"
        EC2_SERVER = credentials("ec2-host")
        EC2_USER = credentials("ec2-username")
        SSH_CREDENTIALS = credentials('cmv-ssh-key')
    }
    
    stages {
        stage("Checkout") {
            steps {
                checkout scm
                script {
                    echo "Current branch is ${BRANCH_NAME}"
                }
            }
        }
        stage('Install Dependencies') {
            steps {
                dir('cmv_gateway/cmv_front') {
                    sh """
                    mkdir -p ${NPM_CACHE_DIR}
                    npm config set cache ${NPM_CACHE_DIR}
                    npm ci --prefer-offline
                    """
                }
            }
        }
        stage('Run Frontend Tests') {
            steps {
                dir('cmv_gateway/cmv_front') {
                    sh 'npm run test:unit'
                }
            }
        }
        stage('Run Backend Tests') {
            steps {
                sh 'cd cmv_gateway/cmv_back/ && docker-compose build'
                sh 'docker-compose up --abort-on-container-exit'
            }
            post {
                always {
                    sh 'docker-compose down -v'
                }
            }
        }
        stage('Build Image') {
            steps {
                dir('cmv_gateway') {
                    script {
                        sh "echo 'Starting Docker build...'"
                        sh "docker --version"
                        sh "pwd"
                        sh "ls -la"
                        def dockerImage = docker.build("${IMAGE_GATEWAY}:${IMAGE_GATEWAY_TAG}", "-f Dockerfile .")
                        sh "echo 'Docker build completed.'"
                    }
                }
            }
        }
        stage('Push to DockerHub') {
            steps {
                sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin'
                sh "docker push ${IMAGE_GATEWAY}:${IMAGE_GATEWAY_TAG}"
            }
        }
        stage('Deploy to EC2') {
            steps {
                script {
                    def remoteCommands = """
                        # Arrêt et suppression de l'ancien container
                        docker stop cmv_gateway || true
                        docker rm cmv_gateway || true

                        # Suppression de l'ancienne image
                        docker rmi ${IMAGE_GATEWAY}:latest || true

                        # Redémarrage des containers
                        docker compose up -d

                        # Nettoyage des images non utilisées
                        docker image prune -f
                    """

                    // Exécution des commandes sur le serveur EC2
                    sshagent(credentials: ['cmv-ssh-key']) {
                        sh """
                            ssh -o StrictHostKeyChecking=no \
                                -o UserKnownHostsFile=/dev/null \
                                -o LogLevel=ERROR \
                                ${EC2_USER}@${EC2_SERVER} << EOF
                            
                            IMAGE_NAME=${IMAGE_GATEWAY}
                            IMAGE_TAG=${env.BUILD_NUMBER}
                            ${remoteCommands}
EOF
                        """
                    }
                }
            }
        }
    }    
    
    post {
        always {
            node {
                sh 'docker logout'
                cleanWs()

            }
        }
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed. Please check the logs.'
        }
    }
}